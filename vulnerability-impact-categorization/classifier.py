"""Module classifier.py contains functionality that classifies CVEs."""


def cve_is_about_system(cpe_type):
    """
    Determines whether CVE is about system.
    :param cpe_type: One of {'a', 'o', 'h'} = application, operating system,
    hardware
    :return: true if CVE is about system.
    """
    return ('o' in cpe_type or 'h' in cpe_type) and 'a' not in cpe_type


def cve_is_about_application(cpe_type):
    """
    Determines whether CVE is about application.
    :param cpe_type: One of {'a', 'o', 'h'} = application, operating system,
    hardware
    :return: true if description is about application.
    """
    return 'a' in cpe_type


def has_code_execution_as_root(description, cvssv2, cvssv3):
    """
    Function determines whether CVE has "Arbitrary code execution as
    root/administrator/system" as its impact.
    :param description: description of CVE
    :param cvssv2: CVSS version 2 of CVE
    :param cvssv3: CVSS version 3 of CVE
    :return: True if CVE has "Arbitrary code execution as
    root/administrator/system" as its impact
    """

    necessary_condition = [
        "execute arbitrary code as root",
        "execute arbitrary code with root privileges",
        "execute arbitrary code as the root user",
        "execute arbitrary code as a root user",
        "execute arbitrary code as LocalSystem",
        "execute arbitrary code as SYSTEM",
        "execute arbitrary code as Local System"
        "execute arbitrary code with SYSTEM privileges",
        "execute arbitrary code with LocalSystem privileges",
        "execute dangerous commands as root",
        "execute shell commands as the root user",
        "execute arbitrary commands as root",
        "execute arbitrary commands with root privileges",
        "execute arbitrary commands with root-level privileges",
        "execute commands as root",
        "execute root commands",
        "execute arbitrary os commands as root",
        "execute arbitrary shell commands as root",
        "execute arbitrary commands as SYSTEM",
        "execute arbitrary commands with SYSTEM privileges",
        "run commands as root",
        "run arbitrary commands as root",
        "run arbitrary commands as the root user",
        "execute code with root privileges",
        "run commands as root",
        "load malicious firmware",
        "succeed in uploading malicious Firmware",
        "executed under the SYSTEM account"
    ]

    for phrase in necessary_condition:
        if phrase in description:
            return True

    return has_code_execution_as_user(description.lower(),
                                      cvssv3) and \
        (cvssv2['c'] == "COMPLETE") and \
        (cvssv2['i'] == "COMPLETE") and \
        (cvssv2['a'] == "COMPLETE")


def has_code_execution_as_user(description, cvssv3):
    """
    Function determines whether particular CVE has "Arbitrary code execution
    as user of application" as its impact.
    :param description: description of CVE
    :param cvssv3: CVSS version 3 of CVE
    :return: True if CVE has "Arbitrary code execution as user of application"
    as its impact.
    """

    necessary_condition = [
        "include and execute arbitrary local php files",
        "execute arbitrary code",
        "command injection",
        "execute files",
        "run arbitrary code",
        "execute a malicious file",
        "execution of arbitrary code",
        "remote execution of arbitrary php code",
        "execute code",
        "code injection vulnerability",
        "execute any code",
        "malicious file could be then executed on the affected system",
        "inject arbitrary commands",
        "execute arbitrary files",
        "inject arbitrary sql code",
        "run the setuid executable",
        "vbscript injection",
        "execute administrative operations",
        "performs arbitrary actions",
        "submit arbitrary requests to an affected device",
        "perform arbitrary actions on an affected device",
        "executes an arbitrary program",
        "attacker can upload a malicious payload",
        "execute malicious code",
        "modify sql commands to the portal server",
        "execute arbitrary os commands",
        "execute arbitrary code with administrator privileges",
        "execute administrator commands",
        "executed with administrator privileges",
        "remote procedure calls on the affected system",
        "run a specially crafted application on a targeted system",
        "execute arbitrary code in a privileged context",
        "execute arbitrary code with super-user privileges",
        "run processes in an elevated context",
    ]
    for phrase in necessary_condition:
        if phrase in description:
            return True

    # searching for a such injection vulnerability that changes integrity and
    # confidentiality
    if "sql injection" in description and \
            cvssv3['i'] == "HIGH" and \
            cvssv3['c'] == "HIGH" and \
            "blind sql injection" not in description:
        return True

    required_verbs = [
        " execut",
        " run ",
        ' inject'
    ]
    required_nouns = [
        " code ",
        " command",
        "arbitrary script",
        " code."
    ]

    if test_incidence(description, required_nouns) and \
            test_incidence(description, required_verbs):
        return True

    return False


def test_privileges(description):
    """
    Determines whether description is about gaining privileges.
    :param description: description of CVE
    :return: true if description is about gaining privileges.
    """
    condition = [
        "elevation of privilege vulnerability",
        "privilege escalation",
        "escalation of privilege",
        "escalate privileges",
        "default password",
        "arbitrary password change",
        "escalate",
        "assume the identity of another user",
        "password in configuration file",
        "hardcoded login credentials",
        "passwords are encoded in hexadecimal",
        "passwords are in cleartext",
        "cleartext password storage",
        "obtain admin privilege",
        "obtain administrator privilege",
        "gain administrative rights",
        "gain administrative access",
        "gain administrator access",
        "gain administrator level access",
        "gain administrator rights",
        "obtain the cleartext administrator password",
        "steal the administrator password",
        "obtain the administrator password",
        "obtain the administrator's password",
        "read the administrator password",
        "obtain administrator password",
        "read the administrator's password",
        "discover the administrator password",
        "discover cleartext administrator password",
        "read the admin password",
        "obtain the admin password",
        "receive the admin password",
        "obtain the administrative password",
        "retrieve the administrative password",
        "obtain administrative password",
        "read the administrative password",
        "read administrative password",
        "gain full administrative control",
        "obtain privileged host OS access",
        "log in to the device with elevated privileges",
        "higher level of privileges",
        "change the admin password",
        "default passwords",
        "backdoor admin account",
        "hardcoded username / password",
        "administrator privileges",
        "default system account",
        "automatically logs in as admin",
        "creation of fully privileged new users",
        "user is logged in without being prompted for a password",
        "different privileges then the original requester",
        "obtain control",
        "steal any active admin session",
        "reset the admin password",
        "assuming the identity of a privileged user",
        "obtain privileged host OS access",
        "change the admin password",
        "log in to an affected system as the linux admin user",
        "escalate his or her privileges",
        "launch a process with escalated privileges",
        "to the system with the same level of privilege as the application",
        "reset the admin password",
        "assuming the identity of a privileged user",
        "obtain sensitive domain administrator password information",
        "does not properly mitigate brute-force attacks",
        "allows anyone to authenticate",
        "execute actions that they do not have access to",
        "compromise user accounts",
        "brute force account credentials",
        "user credentials in plain text",
        "actions they do not have access to",
        "execute a report they do not have access to",
        "hijack the authentication of administrators",
        "bypass the application-level authentication",
        "impersonate other users",
        "access user credentials",
        "access to password information",
        "gain administrator functionality",
        "allow plaintext credentials to be obtained",
        "escalate their privileges",
        "credentials in a browser's local storage without expiration",
        "allowing users to elevate their privileges",
        "using the authenticated user's privileges",
        "potential reuse of domain credentials",
        "administrative access to the application",
        "default passwords",
        "on behalf of the currently logged in user",
        "gain privileged access",
        "do not have any option to change their own passwords",
        "create a new admin user",
        "hijack the authentication",
        "gain login access",
        "reset the registered user's password",
        "default privileged account",
        "login with the hashed password",
        "skip authentication checks",
        "hard-coded passwords",
        "hardcoded username and password",
        "local-privilege-escalation",
        "elevation of privileges",
        "include sensitive information such as account passwords",
        "account takeover",
        "obtaining admin privileges",
        "arbitrary password reset",
        "missing brute force protection",
        "makes brute-force attacks easier",
        "numeric password with a small maximum character size",
        "improper authentication issue",
        "gain access to moderator/admin accounts",
        "create new administrator user accounts",
        "take over the entire application",
        "add an administrator account",
        "plain text password",
        "possibly escalating privileges",
        "hijack oauth sessions of other users",
        "allows guest os users to obtain xen privileges",
        "gain access via cookie reuse",
        "password exposure",
        "obtain credentials",
        "resumption of an unauthenticated session",
        "no authorization check when connecting to the device",
        "incorrect authorization check",
        "hijack the authentication of logged administrators",
        "unrestricted access",
        "perform a password reset for users",
        "obtaining administrative permissions",
        "escalate privileges",
        "discloses foreign server passwords",
        "password leak",
        "disclosure of the master password",
        "submit authenticated requests",
        "takeover",
        "perform actions with the privileges of an authenticated user",
        "bypass authentication without obtaining the actual password",
        "take over the administrative session",
        "reset the password of the admin user",
        "gain guest os privileges",
        "reset the admin password",
        "change the administrator account password",
        "plaintext storage of a password",
        "password is stored in clear text",
        "default administrative password",
        "default password of admin",
        "receive the admin password",
        "steal a user's credentials",
        "dictionary attacks",
        "perform operations on device with administrative privileges",
        "include user credentials"
    ]

    if "gain" in description and "privilege" in description:
        return True

    if "bypass authentication" in description and \
            "during an admin login attempt" in description:
        return True

    return test_incidence(description, condition)


def has_root_privileges_description(description):
    """
    Determines whether description is about gaining root privileges.
    :param description: description of CVE
    :return: true if description is about gaining root privileges.
    """
    condition = [
        "gain root privilege",
        "obtain root privilege",
        "leading to root privilege",
        "gains root privilege",
        "gain SYSTEM privilege",
        "obtain SYSTEM privilege",
        "gain LocalSystem privilege",
        "obtain LocalSystem privilege",
        "gain full privilege",
        "gain root access",
        "gain root rights",
        "gain root privileges",
        "gain system level access to a remote shell session",
        "gain administrator or system privileges",
        "leading to root privileges",
        "obtain the root password",
        "take complete control of the device",
        "take full control of the target system",
        "account could be granted root- or system-level privileges",
        "find the root credentials",
        "backdoor root account",
        "elevate the privileges to root",
        "leading to remote root",
        "take control of the affected device",
        "gain complete control",
        "gain full access to the affected system",
        "obtain full access",
        "gain complete control of the system",
        "SYSTEM",
        "elevate privileges to the root user",
        "obtain full control"]

    if "default" in description and \
            "password" in description and \
            "for the root" in description:
        return True

    return test_incidence(description, condition)


def has_gain_root_privileges(description, cvssv2, cvssv3):
    """
    Function determines whether CVE has "Gain root/system/administrator
    privileges on system" as its impact.
    :param description: description of CVE
    :param cvssv2: CVSS version 2 of CVE
    :param cvssv3: CVSS version 3 of CVE
    :return: True if CVE has "Gain root/system/administrator privileges
    on system" as its impact.
    """

    if cvssv3['pr'] != "NONE":
        return False

    if cvssv2['obtainAllPrivilege']:
        if cvssv2['obtainAllPrivilege'] == 'true':
            return True

    if has_root_privileges_description(description):
        return True

    return (cvssv2['c'] == "COMPLETE") and \
           (cvssv2['i'] == "COMPLETE") and \
           (cvssv2['a'] == "COMPLETE") and \
        test_privileges(description)


def has_privilege_escalation(description, cvssv2):
    """
    Function determines whether CVE has "Privilege escalation on system"
     as its impact. CVE has "Privilege escalation on system" as its impact,
     if attacker can gain root privileges and possess user privileges before
     exploiting vulnerability.
    :param description: description of CVE
    :param cvssv2: CVSS version 2 of CVE
    :return: True if CVE has "Privilege escalation on system" as its impact.
    """

    if cvssv2['obtainAllPrivilege']:
        if cvssv2['obtainAllPrivilege'] == 'true':
            return True

    if has_root_privileges_description(description):
        return True

    return (cvssv2['c'] == "COMPLETE") and \
           (cvssv2['i'] == "COMPLETE") and \
           (cvssv2['a'] == "COMPLETE") and \
        test_privileges(description)


def has_gain_application_privileges(description):
    """
    Function determines whether particular CVE has "Gain privileges on
    application" as its impact.
    :param description: description of CVE
    :return:
    """

    return test_privileges(description)


def has_gain_user_privileges(description, cvssv2, cpe_type):
    """
    Function determines whether particular CVE has "Gain user privileges
    on system" as its impact.
    :param description: description of CVE
    :param cvssv2: CVSS version 2
    :param cpe_type: One of {'a', 'o', 'h'} = application, operating system,
    hardware
    :return: True, if CVE has "Gain user privileges on system" as its impact.
    """

    if cvssv2['obtainUserPrivilege']:
        if cvssv2['obtainUserPrivilege'] == 'true':
            return True

    system_tokens = [
        "gain elevated privileges on the system",
        "with the knowledge of the default password may login to the system",
        "log in as an admin user of the affected device",
        "log in as an admin or oper user of the affected device",
        "log in to the affected device using default credentials",
        "log in to an affected system as the admin user",
        "log in to the device with the privileges of a limited user",
        "devices have a hardcoded-key vulnerability"
    ]

    for phrase in system_tokens:
        if phrase in description:
            return True

    return not cve_is_about_application(cpe_type) and \
        test_privileges(description)


def has_system_confidentiality_loss(description, cvssv2):
    """
    Function determines whether particular CVE has "System confidentiality
    loss" as its impact.
    :param description: description of CVE
    :param cvssv2: CVSS version 2 of CVE
    :return: True if CVE has "System confidentiality loss" as its impact.
    """

    sufficient_condition = [
        "devices allow remote attackers to read arbitrary files",
        "compromise the systems confidentiality",
        "read any file on the camera's linux filesystem",
        "gain read-write access to system settings",
        "all system settings can be read",
        "leak information about any clients connected to it",
        "read sensitive files on the system",
        "access arbitrary files on an affected device",
        "access system files",
        "gain unauthorized read access to files on the host",
        "obtain sensitive system information",
        "obtain sensitive information from kernel memory",
        "obtain privileged file system access",
        "routers allow directory traversal sequences",
        "packets can contain fragments of system memory",
        "obtain kernel memory",
        "read kernel memory",
        "read system memory",
        "reading system memory",
        "read device memory",
        "read host memory",
        "access kernel memory",
        "access sensitive kernel memory",
        "access shared memory",
        "host arbitrary files",
        "enumerate user accounts",
        "compromise an affected system",
    ]

    if cvssv2['c'] == "PARTIAL":
        if test_incidence(description, sufficient_condition):
            return True

    return cvssv2['c'] == "COMPLETE"


def has_system_integrity_loss(description, cvssv2):
    """
    Function determines whether particular CVE has "System integrity loss"
    as its impact.
    :param description: description of CVE
    :param cvssv2: CVSS version 2 of CVE
    :return: True if CVE has "System integrity loss" as its impact.
    """

    sufficient_condition = [
        "compromise the systems confidentiality or integrity",
        "gain read-write access to system settings",
        "all system settings can be read and changed",
        "create arbitrary directories on the affected system",
        "on ismartalarm cube devices, there is incorrect access control",
        "bypass url filters that have been configured for an affected device",
        "bypass configured filters on the device",
        "modification of system files",
        "obtain privileged file system access",
        "change configuration settings",
        "compromise the affected system",
        "overwrite arbitrary kernel memory",
        "modify kernel memory",
        "overwrite kernel memory",
        "modifying kernel memory",
        "overwriting kernel memory",
        "corrupt kernel memory",
        "corrupt user memory",
        "upload firmware changes",
        "configuration parameter changes",
        "obtain sensitive information from kernel memory",
        "change the device's settings",
        "configuration changes",
        "modification of system states",
        "host arbitrary files"
    ]

    if cvssv2['i'] == "PARTIAL":
        if test_incidence(description, sufficient_condition):
            return True

    return cvssv2['i'] == "COMPLETE"


def has_system_availability_loss(description, cvssv2):
    """
    Function determines whether particular CVE has "System availability loss"
    as its impact.
    :param description: description of CVE
    :param cvssv2: CVSS version 2 of CVE
    :return: True if CVE has "System availability loss" as its impact.
    """

    system_tokens = [
        'device crash',
        'device reload',
        'system crash',
        'cpu consumption'
    ]
    # reload is not enough because of "telephone" applications
    # cannot use reboot because description often describes what happens after
    # normal = expected reboot caused regularly

    for token in system_tokens:
        if token in description:
            return True

    sufficient_condition = [
        "an extended denial of service condition for the device",
        "exhaust the memory resources of the machine",
        "denial of service (dos) condition on an affected device",
        "crash systemui",
        "denial of service (dos) condition on the affected appliance",
        "cause the device to hang or unexpectedly reload",
        "denial of service (use-after-free) via a crafted application",
        "cause an affected device to reload",
        "cause an affected system to stop"
    ]

    if cvssv2['a'] == "PARTIAL":
        if test_incidence(description, sufficient_condition):
            return True

    return cvssv2['a'] != 'NONE' if has_system_integrity_loss(
        description,
        cvssv2) \
        else cvssv2['a'] == 'COMPLETE'


def system_confidentiality_changed(description, cvssv2, cpe_type):
    """
    Function determines whether particular CVE has "System confidentiality
    loss" as its impact. It is less strict than
    has_system_confidentiality_loss() function.
    :param description: description of CVE
    :param cvssv2: CVSS version 2 of CVE
    :param cpe_type: One of {'a', 'o', 'h'} = application, operating system,
    hardware
    :return: True if CVE has "System confidentiality loss" as its impact.
    """

    if "in the remote system" in description and cvssv2['c'] == "PARTIAL":
        return True

    return cve_is_about_system(cpe_type) and cvssv2['c'] == "PARTIAL"


def system_integrity_changed(description, cvssv2, cpe_type):
    """
    Function determines whether particular CVE has "System integrity loss"
    as its impact. It is less strict than
    has_system_integrity_loss() function.
    :param description: description of CVE
    :param cvssv2: CVSS version 2 of CVE
    :param cpe_type: One of {'a', 'o', 'h'} = application, operating system,
    hardware
    :return: True if CVE has "System integrity loss" as its impact.
    """

    if "in the remote system" in description and cvssv2['i'] == "PARTIAL":
        return True

    return cve_is_about_system(cpe_type) and cvssv2['i'] == "PARTIAL"


def system_availability_changed(description, cvssv2, cpe_type):
    """
    Function determines whether particular CVE has "System availability loss"
    as its impact. It is less strict than
    has_system_availability_loss() function.
    :param description: description of CVE
    :param cvssv2: CVSS version 2 of CVE
    :param cpe_type: One of {'a', 'o', 'h'} = application, operating system,
    hardware
    :return: True if CVE has "System availability loss" as its impact.
    """

    if "in the remote system" in description and cvssv2['a'] == "PARTIAL":
        return True

    return cve_is_about_system(cpe_type) and cvssv2['a'] == "PARTIAL"


def add_other_cia_impacts(result_impacts, cvssv2):
    """
    When CVE has one of "System CIA loss" as an impact, add the other.
    :param result_impacts: set of result impacts
    :param cvssv2: CVSS version 2 of CVE
    :return: result impacts with added impacts.
    """
    if "System integrity loss" in result_impacts and \
            "System confidentiality loss" not in result_impacts:
        if cvssv2['c'] == "PARTIAL":
            result_impacts.append("System confidentiality loss")

    if "System integrity loss" in result_impacts and \
            "System availability loss" not in result_impacts:
        if cvssv2['a'] == "PARTIAL":
            result_impacts.append("System availability loss")

    if "System confidentiality loss" in result_impacts and \
            "System integrity loss" not in result_impacts:
        if cvssv2['i'] == "PARTIAL":
            result_impacts.append("System integrity loss")

    if "System confidentiality loss" in result_impacts and \
            "System availability loss" not in result_impacts:
        if cvssv2['a'] == "PARTIAL":
            result_impacts.append("System availability loss")

    if "System availability loss" in result_impacts and \
            "System confidentiality loss" not in result_impacts:
        if cvssv2['c'] == "PARTIAL":
            result_impacts.append("System confidentiality loss")

    if "System availability loss" in result_impacts and \
            "System integrity loss" not in result_impacts:
        if cvssv2['i'] == "PARTIAL":
            result_impacts.append("System integrity loss")


def test_root_level_impacts(vulner_info):
    """
    Test whether CVE has one of impacts:
    "Arbitrary code execution as root/administrator/system",
    "Gain root/system/administrator privileges on system",
    "Privilege escalation on system".
    :param vulner_info: object of class Vulnerability from CVE_parser.py
    :return: result impact or impacts
    """
    result_impacts = []

    if has_code_execution_as_root(
            vulner_info.CVE_description_value,
            vulner_info.cvssv2,
            vulner_info.cvssv3):
        result_impacts.append(
            "Arbitrary code execution as root/administrator/system")
        return result_impacts

    if has_gain_root_privileges(
            vulner_info.CVE_description_value,
            vulner_info.cvssv2,
            vulner_info.cvssv3):
        result_impacts.append(
            "Gain root/system/administrator privileges on system")
        return result_impacts

    if has_privilege_escalation(
            vulner_info.CVE_description_value.lower(),
            vulner_info.cvssv2):
        result_impacts.append("Privilege escalation on system")
        return result_impacts

    return result_impacts


def system_cia_loss(vulner_info):
    """
    Test whether CVE has one of impacts:
    "System confidentiality loss",
    "System integrity loss",
    "System availability loss".
    :param vulner_info: object of class Vulnerability from CVE_parser.py
    :return: result impact or impacts
    """
    result_impacts = []

    if has_system_confidentiality_loss(
            vulner_info.CVE_description_value.lower(),
            vulner_info.cvssv2):
        result_impacts.append("System confidentiality loss")

    if has_system_integrity_loss(
            vulner_info.CVE_description_value.lower(),
            vulner_info.cvssv2):
        result_impacts.append("System integrity loss")

    if has_system_availability_loss(
            vulner_info.CVE_description_value.lower(),
            vulner_info.cvssv2):
        result_impacts.append("System availability loss")

    add_other_cia_impacts(result_impacts, vulner_info.cvssv2)

    return result_impacts


def test_user_level_impacts(vulner_info):
    """
    Test whether CVE has one of impacts:
    "Gain user privileges on system",
    "Arbitrary code execution as user of application",
    "Gain privileges on application".
    :param vulner_info: object of class Vulnerability from CVE_parser.py
    :return: result impact or impacts
    """
    result_impacts = []
    if has_gain_user_privileges(
            vulner_info.CVE_description_value.lower(),
            vulner_info.cvssv2,
            vulner_info.cpe_type):
        result_impacts.append("Gain user privileges on system")
        return result_impacts

    if has_code_execution_as_user(
            vulner_info.CVE_description_value.lower(),
            vulner_info.cvssv3):
        result_impacts.append(
            "Arbitrary code execution as user of application")
        return result_impacts

    if has_gain_application_privileges(
            vulner_info.CVE_description_value.lower()):
        result_impacts.append("Gain privileges on application")
        return result_impacts

    return result_impacts


def distinguish_system_application(vulner_info):
    """
    Test whether CVE has system CIA loss or application CIA loss.
    :param vulner_info: object of class Vulnerability from CVE_parser.py
    :return: result impact or impacts
    """
    result_impacts = []
    if system_confidentiality_changed(
            vulner_info.CVE_description_value,
            vulner_info.cvssv2,
            vulner_info.cpe_type):
        result_impacts.append("System confidentiality loss")

    if system_integrity_changed(
            vulner_info.CVE_description_value,
            vulner_info.cvssv2,
            vulner_info.cpe_type):
        result_impacts.append("System integrity loss")

    if system_availability_changed(
            vulner_info.CVE_description_value,
            vulner_info.cvssv2,
            vulner_info.cpe_type):
        result_impacts.append("System availability loss")

    if not result_impacts:
        if vulner_info.cvssv3['i'] != "NONE":
            result_impacts.append("Application integrity loss")
        if vulner_info.cvssv3['a'] != "NONE":
            result_impacts.append("Application availability loss")
        if vulner_info.cvssv3['c'] != "NONE":
            result_impacts.append("Application confidentiality loss")

    return result_impacts


def classifier(vulner_info):
    """
    Function that classifies CVEs according to vulner_info.
    :param vulner_info: object of class Vulnerability from CVE_parser.py
    :return: result impact or impacts
    """
    result_impacts = test_root_level_impacts(vulner_info)
    if result_impacts:
        return result_impacts

    result_impacts = system_cia_loss(vulner_info)
    if result_impacts:
        return result_impacts

    result_impacts = test_user_level_impacts(vulner_info)
    if result_impacts:
        return result_impacts

    result_impacts = distinguish_system_application(vulner_info)
    return result_impacts


def test_incidence(description, list_of_keywords):
    """
    Determines whether at least one of keyword from list_of_keywords is in
    description.
    :param description: description of CVE.
    :param list_of_keywords: keywords function searches for
    :return: true if one of keywords is in description.
    """
    for word in list_of_keywords:
        if word in description:
            return True

    return False
