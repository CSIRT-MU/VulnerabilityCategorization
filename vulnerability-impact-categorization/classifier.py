import CVE_parser
import datetime
import string
import sys
import utility

DoS_impacts = ["DoS: resource consumption (CPU)", "DoS: resource consumption (memory)",
               "DoS: resource consumption (other)", "DoS: crash / exit / restart",
               "DoS: amplification", "DoS: instability"]
DoS_affecting_availability = ["DoS: resource consumption (CPU)", "DoS: resource consumption (memory)",
                              "DoS: resource consumption (other)", "DoS: crash / exit / restart"]
read_data_impacts = ["Read files or directories", "Read application data", "Read memory"]
modify_data_impacts = ["Modify application data", "Modify files or directories", "Modify memory"]
execute_code_group = ["Execute unauthorized code or commands", "Alter execution logic", "Unexpected state"]
other_impacts_group = ["Other", "Quality degradation", "Varies by context"]
discard_impacts = ["Other", "Varies by context", "Unexpected state"]


def exclude_impossible_impacts(set_of_impacts, cvssv2, cvssv3):
    """
    Using CVSSV2 and CVSSV3 and their Confidentiality, Integrity and Availability Impacts we can exclude some impacts
    from Read dat, Modify data and DoS group of impacts.
    :param set_of_impacts: Set of possible impacts for particular CVE.
    :param cvssv2: Dictionary containing CVSSV2 values. Can be passed to function empty.
    :param cvssv3: Dictionary containing CVSSV3 values. Can be passed to function empty.
    :return: set of impacts without impossible impacts
    """

    if cvssv2:
        # If there is NONE confidentialityImpact => exclude Read data impacts
        if cvssv2['c'] == "NONE":
            for impact in read_data_impacts:
                if impact in set_of_impacts:
                    set_of_impacts.remove(impact)

        # If there is NONE integrityImpact => exclude modify data impacts
        if cvssv2['i'] == "NONE":
            for impact in modify_data_impacts:
                if impact in set_of_impacts:
                    set_of_impacts.remove(impact)

        # If there is NONE availabilityImpact => exclude DoS impacts which directly affect availability
        if cvssv2['a'] == "NONE":
            for impact in DoS_affecting_availability:
                if impact in set_of_impacts:
                    set_of_impacts.remove(impact)

        """if (cvssv2['obtainAllPrivilege'] == "false"):
            set_of_impacts.discard("Gain root / admin / SYSTEM privileges")

        if (cvssv2['obtainUserPrivilege'] == "false") and (cvssv2['obtainOtherPrivilege'] == "false"):
            set_of_impacts.discard("Gain user / other privileges or assume identity")"""

    # The same for CVSSV3
    if cvssv3:
        if cvssv3['c'] == "NONE":
            for impact in read_data_impacts:
                if impact in set_of_impacts:
                    set_of_impacts.remove(impact)

        if cvssv3['i'] == "NONE":
            for impact in modify_data_impacts:
                if impact in set_of_impacts:
                    set_of_impacts.remove(impact)

        if cvssv3['a'] == "NONE":
            for impact in DoS_affecting_availability:
                if impact in set_of_impacts:
                    set_of_impacts.remove(impact)

    # return set_of_impacts


def extract_impacts_from_description(description):
    """
    Trying to find keywords in description create a set of possible impacts.
    :param description: CVE description value
    :return: set of possible impacts (depending on description)
    Puzitie nutnej a postacujucej podmienky.
    """


def test_incidence(description, list_of_keyqords):
    for word in list_of_keyqords:
        if word in description:
            return True

    return False


def test_remote_code_execution_as_root(description):
    """
    Testuj nutnu , postacujucu podmienku.
    :param description:
    :return:
    """

    # Tokens execute, code, command, root, administrator / admin, SYSTEM, run
    necessary_condition = ["execute arbitrary code as root", "execute arbitrary code with root privileges",
                           "execute arbitrary code as the root user",
                           "execute arbitrary code as a root user",

                           "execute arbitrary code as LocalSystem",
                           "execute arbitrary code as SYSTEM",
                           "execute arbitrary code as Local System"
                           "execute arbitrary code with SYSTEM privileges",
                           "execute arbitrary code with super-user privileges"
                           "execute arbitrary code with administrator privileges",
                           "execute arbitrary code with LocalSystem privileges",
                           "execute arbitrary code as system admin",
                           "execute administrator commands",
                           "execute dangerous commands as root",
                           "execute shell commands as teh root user"

                           "execute arbitrary commands as root",
                           "execute arbitrary commands with root privileges",
                           "execute arbitrary commands with root-level privileges",
                           "execute commands as root",
                           "execute root commands",
                           "execute arbitrary OS commands as root",
                           "execute arbitrary shell commands as root",

                           "execute arbitrary commands as SYSTEM",
                           "execute arbitrary commands with SYSTEM privileges",


                           "run commands as root",
                           "run arbitrary commands as root",
                           "run arbitrary commands as the root user"]

    for phrase in necessary_condition:
        if phrase in description:
            print phrase
            return True

    regex = []

    # sufficient condition
    # toto sa yatial nehodi
    required_verbs = [" execut", " run ", " accomplish", " perform", " fulfill"]
    required_nouns = [" code ", " command", " script"]
    required_privileges = [" root ", " administrator ", " admin ", " SYSTEM ", " LocalSystem "]

    return False


def test_unauthorized_code_as_user(description):
    """

    :return:
    """

    # Nutna podmienka
    necessary_condition = []

    # Postacujuca podmienka
    required_verbs = [" execut", " run ", " accomplish", " perform", " fulfill"]
    required_nouns = [" code ", " command", " script"]

    if test_incidence(description, required_nouns) and test_incidence(description, required_verbs):
        return True

    return False


def test_gain_user_privileges_or_assume_identity(description):
    """

    :return:
    """

    # Nutna podmienka
    # testuj lower
    necessary_condition = ["gain privilege", "gain additional privilege", "gain addition privilege",
                           "gain elevated privilege", "gain certain privilege", "gain the privilege",
                           "gain temporary privilege", "gain group privilege", "gain other privilege",
                           "gain apache privilege", "gain dba privilege", "gain read-write privilege",
                           "gain update privilege"]
    # gain slovo privileges a slovo nie je root ani system ani administrator, administartive

    # Postacujuca podmienka
    # testuj gain a privileges - fakt treba

    for phrase in necessary_condition:
        if phrase in description:
            return True

    return False



def test_gain_root_privileges(description):
    """

    :return:
    """

    # toto tu vyhladavaj asi v lower()
    necessary_condition = ["gain root privilege", "obtain root privilege", "leading to root privilege",
                           "gains root privilege",
                           "gain SYSTEM privilege", "gain system privilege", "obtain system privilege",
                           "obtain SYSTEM privilege",
                           "gain LocalSystem privilege", "obtain LocalSystem privilege",
                           "gain admin privilege", "gain Admin privilege", "obtain admin privilege",
                           "gain administrator privilege", "obtain administrator privilege",
                           "gain full privilege",
                           "gain administrative rights", "gain administrative access", "gain administrative privileges",
                           "gain root access", "gain root rights", "gain root privileges"
                           "gain admin privileges", "gain system privileges", "gain system access",
                           "gain system level access",
                           "gain administrator access", "gain administrator privileges",
                           "gain administrator or system privileges", "gain administrator level access",
                           "gain administrator rights", "leading to root privileges", "obtain the root password",
                           "obtain the cleartext administrator password", "steal the administrator password",
                           "obtain the administrator password", "obtain the administrator's password",
                           "read the administrator password", "obtain administrator password",
                           "read the administrator's password", "discover the administrator password",
                           "discover cleartext administrator password",
                           "read the admin password", "obtain the admin password", "receive the admin password",
                           "obtain the administrative password", "retrieve the administrative password",
                           "obtain administrative password", "read the administrative password",
                           "read administrative password", "gain full administrative control"]
    # opytat sa na administrative privileges - doplnit

    for phrase in necessary_condition:
        if phrase in description:
            return True

    return False


def test_read_data(description, impact):
    """

    :return:
    """

    # information disclosure vulnerability
    phrases_for_all_impacts = ["read sensitive information", "information disclosure",
                               "obtain highly sensitive information", "obtain potentially sensitive information",
                               "obtain sensitive information", "access sensitive information",
                               "contain sensitive information", "expose sensitive", "exposes sensitive",
                               "exposure of sensitive information", "disclose sensitive information",
                               "discloses sensitive information", "leak sensitive information",
                               "leaks sensitive information", "view sensitive information",
                               "reveal sensitive information", "provide sensitive information",
                               "provides sensitive information", "recover sensitive information",
                               "recover potentially sensitive information", "steal sensitive information",
                               "steal potentially sensitive information", "release sensitive information",
                               "releases sensitive information"]
    phrases_for_memory = ["obtain kernel memory", "obtain server memory", "obtain sensitive memory",
                          "read kernel memory", "read arbitrary memory", "read restricted memory",
                          "read sensitive memory", "read process memory", "read certain memory", "reading the memory",
                          "reading process memory", "read stack memory", "reading a memory", "read system memory",
                          "reading system memory", "read device memory", "read host memory",
                          "access kernel memory", "access sensitive kernel memory",
                          "access shared memory"]
    # v description.lower(
    phrases_for_files_and_directories = ["read files", "read director", "list the director", "list arbitrary director",
                                         "read arbitrary file", "access arbitrary file", "retrieve arbitrary file",
                                         "traversal vulnerability", "dot dot", "determine the full pathname",
                                         "obtain the full pathname"]
    phrases_for_application = ["read arbitrary code", "read arbitrary commands"]

    for phrase in phrases_for_all_impacts:
        if phrase in description:
            return True

    """found_impacts = {"Read memory": False, "Read application data": False, "Read files or directories": False}

    for phrase in phrases_for_memory:
        if phrase in description:
            it_is_read_memory = True
            break

    for phrase in _:
        pass"""
    if impact == "Read memory":
        for phrase in phrases_for_memory:
            if phrase in description:
                return True
    elif impact == "Read files or directories":
        for phrase in phrases_for_files_and_directories:
            if phrase in description:
                return True
    else:
        # Read application data
        for phrase in phrases_for_application:
            if phrase in description:
                return True

    return False


def test_modify_data(description, impact):
    """

    :return:
    """

    phrases_for_all_impacts = ["modify sensitive information"]
    phrases_for_memory = ["overwrite arbitrary kernel memory", "overwrite arbitrary heap memory",
                          "access sensitive kernel memory", "modify kernel memory", "modify process memory",
                          "modifying kernel memory", "modifying process memory", "modify sensitive memory",
                          "modify unexpected memory", "modify arbitrary memory", "modify invalid memory",
                          "modify flash memory", "modify heap memory", "overwrite arbitrary memory",
                          "overwrite kernel memory", "ovewrite process memory", "overwrite unauthorized memory",
                          "overwrite certain memory", "overwrite heap memory", "overwriting kernel memory",
                          "overwrite of memory", "overwrite hypervisor memory",
                          "corrupt heap memory", "corrupt kernel memory", "corrupt user memory", "corrupt stack memory"]
    phrases_for_files_and_directories = ["delete director", "deletes director", "deleting director", "overwrite file",
                                         "overwrite arbitrary file", "delete file", "deletes file", "deleting file",
                                         "delete arbitrary file", "modify arbitrary file", "create arbitrary file",
                                         "change file", "changes file", "changing file"]
    phrases_for_application = ["inject data", "injecting data", "inject content", "injecting content",
                               "modify user cookies", "modify cookies"]

    for phrase in phrases_for_all_impacts:
        if phrase in description:
            return True

    if impact == "Modify memory":
        for phrase in phrases_for_memory:
            if phrase in description:
                return True
    elif impact == "Modify files or directories":
        for phrase in phrases_for_files_and_directories:
            if phrase in description:
                return True
    else:
        for phrase in phrases_for_application:
            if phrase in description:
                return True

    return False

def test_denial_of_service(description, impact):
    """

    :return:
    """

    necessary_condition = ["denial of service", "denial-of-service"]

    for phrase in necessary_condition:
        if phrase in description.lower():
            return True

    if "DoS" in description.lower():
        return True

    return False


def test_quality_degradation(description):
    """

    :return:
    """

    phrases = ["performance degradation", "degradation"]

    for phrase in phrases:
        if phrase in description:
            return True

    return False


def test_hide_activities(description):
    """

    :return:
    """

    phrases = ["hide", "hid", "hidden", "hiding"]

    for phrase in phrases:
        if phrase in description:
            return True

    return False


# def test_another_effect():


def vulnerability_exploit_effect_classifier():
    dict_of_weakness = utility.get_all_cwe()
    sys.stdout = open('classifier.txt', "w")
    # i = 2002
    i = 2017
    j = 0

    while i <= datetime.datetime.now().year:
        dict_of_vulner = CVE_parser.parse('cve-data/nvdcve-1.0-{0}.json'.format(i))

        for key in dict_of_vulner:
            if ("** REJECT **" not in dict_of_vulner[key].CVE_description_value) and \
                    dict_of_vulner[key].CVE_problem_type_value:
                string_id = dict_of_vulner[key].CVE_problem_type_value
                tmp_list = string_id.split("-")
                cwe_id = tmp_list[1]

                if (cwe_id[0] in string.digits) and (cwe_id in dict_of_weakness):
                    # CWE has form CWE-number and we have got it in our research view of CWEs

                    set_of_impacts = set()
                    for consequence in dict_of_weakness[cwe_id]:
                        for impact in consequence['impact']:
                            set_of_impacts.add(impact)

                    for impact in discard_impacts:
                        set_of_impacts.discard(impact)

                    if dict_of_vulner[key].cvssv2:
                        if dict_of_vulner[key].cvssv2['impactScore'] != "10.0":
                            continue

                    print set_of_impacts

                    if set_of_impacts:
                        if "Gain privileges / assume identity" in set_of_impacts:
                            set_of_impacts.discard("Gain privileges / assume identity")
                            set_of_impacts.add("Gain root / admin / SYSTEM privileges")
                            set_of_impacts.add("Gain user / other privileges or assume identity")

                        if "Execute unauthorized code or commands" in set_of_impacts:
                            set_of_impacts.discard("Execute unauthorized code or commands")
                            set_of_impacts.add("Execute unauthorized code as user")
                            set_of_impacts.add("Remote code execution as root")

                        if "Bypass protection mechanism" in set_of_impacts:
                            set_of_impacts.discard("Bypass protection mechanism")
                            set_of_impacts.add("Gain root / admin / SYSTEM privileges")
                            set_of_impacts.add("Gain user / other privileges or assume identity")
                            set_of_impacts.add("Execute unauthorized code as user")
                            set_of_impacts.add("Remote code execution as root")

                        exclude_impossible_impacts(set_of_impacts, dict_of_vulner[key].cvssv2,
                                                   dict_of_vulner[key].cvssv3)

                        delete_impacts = set()
                        for impact in set_of_impacts:
                            if impact == "Remote code execution as root":
                                if not test_remote_code_execution_as_root(dict_of_vulner[key].CVE_description_value):
                                    delete_impacts.add("Remote code execution as root")
                            elif impact in DoS_impacts:
                                if not test_denial_of_service(dict_of_vulner[key].CVE_description_value, impact):
                                    delete_impacts.add(impact)
                            elif impact == "Gain root / admin / SYSTEM privileges":
                                if not test_gain_root_privileges(dict_of_vulner[key].CVE_description_value):
                                    delete_impacts.add("Gain root / admin / SYSTEM privileges")
                            elif impact in read_data_impacts:
                                if not test_read_data(dict_of_vulner[key].CVE_description_value, impact):
                                    delete_impacts.add(impact)
                            elif impact in modify_data_impacts:
                                if not test_modify_data(dict_of_vulner[key].CVE_description_value, impact):
                                    delete_impacts.add(impact)
                            elif impact == "Hide activities":
                                if not test_hide_activities(dict_of_vulner[key].CVE_description_value):
                                    delete_impacts.add(impact)
                            elif impact == "Quality degradation":
                                if not test_quality_degradation(dict_of_vulner[key].CVE_description_value):
                                    delete_impacts.add(impact)
                            elif impact == "Gain user / other privileges or assume identity":
                                if not test_gain_user_privileges_or_assume_identity(
                                        dict_of_vulner[key].CVE_description_value):
                                    delete_impacts.add(impact)
                            else:
                                # exec as user
                                if not test_unauthorized_code_as_user(dict_of_vulner[key].CVE_description_value):
                                    delete_impacts.add(impact)

                        for impact in delete_impacts:
                            set_of_impacts.discard(impact)


                        write_cve_information(dict_of_vulner, key)
                        print set_of_impacts
                        print ""
                        print ""
                        j += 1



                    else:
                        # What to do when it is empty
                        pass
        i += 1
    print j
    sys.stdout.close()


"________________________________________OLD CLASSIFIER________________________________________________________________"


def exclude_impossible_impacts_old(set_of_impacts, cvssv2, cvssv3):
    """
    Using CVSSV2 and CVSSV3 and their Confidentiality, Integrity and Availability Impacts values we can exclude impacts
    from Read data, Modify data or DoS group as impossible impacts.
    :param set_of_impacts: Set of possible impacts for particular CVE.
    :param cvssv2: Dictionary containing CVSSV2 values. Can be passed to function empty.
    :param cvssv3: Dictionary containing CVSSV3 values. Can be passed to function empty.
    :return: set of impacts without impossible impacts
    """

    if cvssv2:
        # If there in NONE confidentialityImpact => exclude Read data impacts
        if cvssv2['c'] == "NONE":
            for impact in read_data_impacts:
                if impact in set_of_impacts:
                    set_of_impacts.remove(impact)

        # If there is NONE integrityImpact => exclude modify data impacts
        if cvssv2['i'] == "NONE":
            for impact in modify_data_impacts:
                if impact in set_of_impacts:
                    set_of_impacts.remove(impact)

        # If there is NONE availabilityImpact => exclude DoS impacts
        if cvssv2['a'] == "NONE":
            for impact in DoS_impacts:
                if impact in set_of_impacts:
                    set_of_impacts.remove(impact)

        # If all of the "obtainPrivileges" parameters are false => exclude Gain privileges impact
        if (cvssv2['obtainAllPrivilege'] == "false") and \
                (cvssv2['obtainUserPrivilege'] == "false") and \
                (cvssv2['obtainOtherPrivilege'] == "false"):
            set_of_impacts.discard("Gain privileges / assume identity")

    # The same for CVSSV3
    if cvssv3:
        if cvssv3['c'] == "NONE":
            for impact in read_data_impacts:
                if impact in set_of_impacts:
                    set_of_impacts.remove(impact)

        if cvssv3['i'] == "NONE":
            for impact in modify_data_impacts:
                if impact in set_of_impacts:
                    set_of_impacts.remove(impact)

        if cvssv3['a'] == "NONE":
            for impact in DoS_impacts:
                if impact in set_of_impacts:
                    set_of_impacts.remove(impact)

    return set_of_impacts


def get_possible_impacts_from_description(description):
    """
    Trying to find keywords in description create a set of possible impacts.
    :param description: CVE description value
    :return: set of possible impacts (depending on description)
    """

    set_of_possible_impacts = set()

    # Execution code impacts
    if 'execut' in description.lower():
        for impact in execute_code_group:
            set_of_possible_impacts.add(impact)

    # DoS impacts
    if ("denial of service" in description.lower()) or ("denial-of-service" in description.lower()) or \
            ("DoS" in description):
        for impact in DoS_impacts:
            set_of_possible_impacts.add(impact)

    # Modify data impacts
    if (" writ" in description.lower()) or ("modif" in description.lower()) or ("change" in description.lower()) or \
            ("insert" in description.lower()) or ("overwrit" in description.lower()) or \
            (" delet" in description.lower()):
        for impact in modify_data_impacts:
            set_of_possible_impacts.add(impact)

    # Read data impacts
    if (" read" in description) or ("expose" in description.lower()) or ("view" in description.lower()) or\
            (" disclos" in description.lower()) or ("disclosure" in description.lower()):
        for impact in read_data_impacts:
            set_of_possible_impacts.add(impact)

    # Gain privileges / assume identity
    if (" gain " in description.lower()) or ("brute force" in description.lower()) or ("guess" in description.lower()) \
            or ("password" in description.lower()) or ("passphrase" in description.lower()):
        set_of_possible_impacts.add("Gain privileges / assume identity")

    # Bypass protection mechanism
    if ("bypass" in description.lower()) or ("identify" in description.lower()) or ("determine" in description.lower()):
        set_of_possible_impacts.add("Bypass protection mechanism")

    # Hide activities
    if "hide activities" in description.lower():
        set_of_possible_impacts.add("Hide activities")

    # Cross-site attack
    if ("cross-site" in description.lower()) or ("XSS" in description) or ("cross site" in description.lower()):
        for impact in execute_code_group:
            set_of_possible_impacts.add(impact)
        set_of_possible_impacts.add("Bypass protection mechanism")

    # SQL injection
    if ("SQL" in description) and ("inject" in description.lower()):
        for impact in execute_code_group:
            set_of_possible_impacts.add(impact)
        set_of_possible_impacts.add("Bypass protection mechanism")
        set_of_possible_impacts.add("Modify application data")

    # XML ... attack
    if ("XML" in description) and ("attack" in description.lower()):
        for impact in read_data_impacts:
            set_of_possible_impacts.add(impact)
        set_of_possible_impacts.add("Bypass protection mechanism")

    # acces can mean read or bypass protection mechanism
    if " access " in description.lower():
        for impact in read_data_impacts:
            set_of_possible_impacts.add(impact)
        set_of_possible_impacts.add("Bypass protection mechanism")

    if " crash " in description.lower():
        set_of_possible_impacts.add("DoS: crash / exit / restart")

    return set_of_possible_impacts


def write_cve_information(dict_of_vulner, key):
    """
    Print all of the contained information for one particular CVE described by key in dictionary of vulnerabilities.
    :param dict_of_vulner: dictionary of vulnerabilities
    :param key: ID of one paricular CVE
    :return:
    """

    print key
    print dict_of_vulner[key].CVE_description_value
    print dict_of_vulner[key].CVE_problem_type_value
    print dict_of_vulner[key].cvssv2
    print dict_of_vulner[key].cvssv3


def classifier():
    """
    1.) If it possible exclude impacts from Read data, Modify data, DoS groups of impacts. Let this result set be
        "set of not impossible impacts".
    2.) Depending on description of CVE try to "guess" the "set of highly possible impacts".
    3.) From the "set of highly possible impacts" take such impacts that are in the "set of not impossible impacts".
    :return:
    """

    dict_of_weakness = utility.get_all_cwe()
    sys.stdout = open('classifier.txt', "w")
    # i = 2002
    i = 2017
    j = 0

    while i <= datetime.datetime.now().year:
        dict_of_vulner = CVE_parser.parse('cve-data/nvdcve-1.0-{0}.json'.format(i))

        for key in dict_of_vulner:
            if "** REJECT **" not in dict_of_vulner[key].CVE_description_value:
                if dict_of_vulner[key].CVE_problem_type_value:
                    # CVE has CWE
                    string_id = dict_of_vulner[key].CVE_problem_type_value
                    tmp_list = string_id.split("-")
                    cwe_id = tmp_list[1]

                    if (cwe_id[0] in string.digits) and (cwe_id in dict_of_weakness):
                        # CWE has form CWE-number and we have got it in our research view of CWEs

                        set_of_impacts = set()
                        for consequence in dict_of_weakness[cwe_id]:
                            for impact in consequence['impact']:
                                set_of_impacts.add(impact)

                        exclude_impossible_impacts_old(set_of_impacts, dict_of_vulner[key].cvssv2,
                                                   dict_of_vulner[key].cvssv3)
                        possible_impacts = get_possible_impacts_from_description(
                            dict_of_vulner[key].CVE_description_value)

                        j += 1
                        if dict_of_vulner[key].cvssv2:
                            if dict_of_vulner[key].cvssv2['impactScore'] != "10.0":
                                continue
                            write_cve_information(dict_of_vulner, key)
                            print "IMPACTS WE CANNOT EXCLUDE"
                            print set_of_impacts

                            result_impacts = set()
                            for impact in possible_impacts:
                                if impact in set_of_impacts:
                                    result_impacts.add(impact)

                            print "WE WOULD CHOOSE"
                            if not result_impacts:
                                print set_of_impacts
                            else:
                                print result_impacts
                            print ""

                    else:
                        # We do not have such CWE in our research view of CWEs or CWE has form NVD-CWE-noinfo or
                        # NVD-CWE-Other. We can try to guess impacts depending on the description
                        # and then exclude some of them according to cvss.

                        """possible_impacts = get_possible_impacts_from_description(
                            dict_of_vulner[key].CVE_description_value)
                        exclude_impossible_impacts_old(possible_impacts, dict_of_vulner[key].cvssv2,
                                                   dict_of_vulner[key].cvssv3)

                        write_cve_information(dict_of_vulner, key)
                        print "WE WOULD CHOOSE"
                        print possible_impacts
                        print """""

                else:
                    # This CVEs does not have CWE but has description, we can try to guess impacts depending on the
                    # description and then exclude some of them according to cvss.
                    # NOTE: it appears that none of them has cvss but just to make sure

                    """possible_impacts = get_possible_impacts_from_description(
                        dict_of_vulner[key].CVE_description_value)
                    exclude_impossible_impacts_old(possible_impacts, dict_of_vulner[key].cvssv2, dict_of_vulner[key].cvssv3)

                    write_cve_information(dict_of_vulner, key)
                    print "WE WOULD CHOOSE"
                    print possible_impacts
                    print """""

            else:
                # It means that this CVE does not have CWE, does not have any useful description and does not have cvss

                """write_cve_information(dict_of_vulner, key)
                print """""

        i += 1
    print j
    sys.stdout.close()
